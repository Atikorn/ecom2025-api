// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String?
  name      String?
  picture   String?
  role      String    @default("user")
  enabled   Boolean   @default(true)
  address   Address[]
  orders    Order[]
  carts     Cart[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        Int       @id @default(autoincrement())
  userId    Int // FK to User
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String
  phone     String
  street    String
  district  String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  orders    Order[]
}

model Product {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  price       Float
  sold        Int              @default(0)
  quantity    Int
  orderItems  ProductOnOrder[]
  cartItems   ProductOnCart[]
  images      Image[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  models      Model?           @relation(fields: [modelsId], references: [id]) // Latest Edited
  modelsId    Int? 
}

model Order {
  id              Int              @id @default(autoincrement())
  products        ProductOnOrder[]
  trackingOrder   String           @unique 
  cartTotal       Float
  shippingFee     Float            @default(0)
  method          String           @default("")
  orderStatus     String           @default("Not Process")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderedBy       User             @relation(fields: [orderedById], references: [id], onDelete: Cascade)
  orderedById     Int
  stripePaymentId String           @default("")
  amount          Int              @default(0)
  status          String           @default("")
  currentcy       String           @default("")
  address         Address          @relation(fields: [addressId], references: [id])
  addressId       Int
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  models Model[]
}

model Cart {
  id          Int             @id @default(autoincrement())
  products    ProductOnCart[]
  cartTotal   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderedBy   User            @relation(fields: [orderedById], references: [id], onDelete: Cascade)
  orderedById Int
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  count     Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Model {
  id         Int       @id @default(autoincrement())
  name       String // เช่น i3, i5, i9
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  products   Product[]
}
